<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Dec 10 23:42:05 2013
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; MPU6050::MPU6050() &rArr; I2Cdev::I2Cdev() &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[16]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SVC_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[18]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SysTick_Handler</a><BR>
 <LI><a href="#[30]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[47]">&lang;Func1&rang;</a> from Serial.o(i.<Func1>) referenced from Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc)
 <LI><a href="#[30]">ADC_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[31]">BOD_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[33]">CAN_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[34]">DMA_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2c]">EINT0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2d]">EINT1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2e]">EINT2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2f]">EINT3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[36]">ENET_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[24]">I2C0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[25]">I2C1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[26]">I2C2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[35]">I2S_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[38]">MCPWM_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2a]">PLL0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3a]">PLL1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[23]">PWM1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[39]">QEI_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[37]">RIT_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[27]">SPI_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[28]">SSP0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[29]">SSP1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[3b]">SystemInit</a> from system_LPC17xx.o(i.SystemInit) referenced from startup_LPC17xx.o(.text)
 <LI><a href="#[1b]">TIMER0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1c]">TIMER1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1d]">TIMER2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1e]">TIMER3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1f]">UART0_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[20]">UART1_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[21]">UART2_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[22]">UART3_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[32]">USB_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from startup_LPC17xx.o(.text) referenced from startup_LPC17xx.o(RESET)
 <LI><a href="#[4a]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[46]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[4d]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[4d]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[4e]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[48]">mbed::Serial::_irq_handler(unsigned, SerialIrq)</a> from Serial.o(i._ZN4mbed6Serial12_irq_handlerEj9SerialIrq) referenced from Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc)
 <LI><a href="#[54]">mbed::Serial::_putc(int)</a> from Serial.o(i._ZN4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[3d]">mbed::Serial::~Serial()</a> from main.o(i._ZN4mbed6SerialD1Ev) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[3d]">mbed::Serial::~Serial()</a> from main.o(i._ZN4mbed6SerialD1Ev) referenced from main.o(.text)
 <LI><a href="#[53]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[53]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[50]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[50]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[52]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[52]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[4f]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[4f]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[51]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[51]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[55]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[56]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[57]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[49]">mbed::CallChain::~CallChain()</a> from CallChain.o(i._ZN4mbed9CallChainD1Ev) referenced from CallChain.o(.constdata__ZTVN4mbed9CallChainE)
 <LI><a href="#[49]">mbed::CallChain::~CallChain()</a> from CallChain.o(i._ZN4mbed9CallChainD1Ev) referenced from main.o(i._ZN4mbed6SerialD1Ev)
 <LI><a href="#[4c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[4c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[4c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[59]">__main</a> from __main.o(!!!main) referenced from startup_LPC17xx.o(.text)
 <LI><a href="#[58]">__sti___8_main_cpp</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[45]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[41]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[40]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[43]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3f]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3e]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[42]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[44]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4b]">us_ticker_irq_handler</a> from us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[29e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2a0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1de]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[61]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[63]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[65]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[66]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2a1]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[2a2]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[67]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[69]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6a]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[6d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6f]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[71]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[72]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[73]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[75]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2a3]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[77]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[79]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[7b]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[7d]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2a4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[8e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2a6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[81]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2a7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2a9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[83]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2aa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2ab]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2ad]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2ae]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2af]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2b0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2b1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2b2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[86]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2b3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[88]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2b5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2b6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2b7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2b8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[5c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2b9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2ba]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[8d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; MPU6050::MPU6050() &rArr; I2Cdev::I2Cdev() &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2bd]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[95]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[96]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c89vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[93]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[256]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[2be]"></a>delay(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>constrain(int, int, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePid(int, int)
</UL>

<P><STRONG><a name="[98]"></a>updatePid(int, int)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain(int, int, int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[9d]"></a>drivemotor(int)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drivemotor(int) &rArr; mbed::PwmOut::operator =(float) &rArr; pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::operator =(float)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a0]"></a>MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MPU6050::getMotion6(short*, short*, short*, short*, short*, short*) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion9(short*, short*, short*, short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[a3]"></a>MPU6050::getTemperature()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU6050::getTemperature() &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a4]"></a>MPU6050::getDeviceID()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::testConnection()
</UL>

<P><STRONG><a name="[a6]"></a>MPU6050::testConnection()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MPU6050::testConnection() &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a7]"></a>MPU6050::setSleepEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MPU6050::setSleepEnabled(bool) &rArr; I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[a9]"></a>MPU6050::setFullScaleAccelRange(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MPU6050::setFullScaleAccelRange(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[ab]"></a>MPU6050::setFullScaleGyroRange(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MPU6050::setFullScaleGyroRange(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[ac]"></a>MPU6050::setClockSource(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MPU6050::setClockSource(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[ad]"></a>MPU6050::initialize()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MPU6050::initialize() &rArr; MPU6050::setClockSource(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setClockSource(unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleGyroRange(unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleAccelRange(unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSleepEnabled(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ae]"></a>MPU6050::MPU6050()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = MPU6050::MPU6050() &rArr; I2Cdev::I2Cdev() &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::I2Cdev()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2bf]"></a>MPU6050::MPU6050__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>$Super$$main</STRONG> (Thumb, 1042 bytes, Stack size 280 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; MPU6050::MPU6050() &rArr; I2Cdev::I2Cdev() &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::setAngle(double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::getAngle(double, double, double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_us()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::MPU6050()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::testConnection()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTemperature()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drivemotor(int)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain(int, int, int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>MPU6050::MPU6050(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::I2Cdev()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2c0]"></a>MPU6050::MPU6050__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>MPU6050::getAuxVDDIOLevel()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[c2]"></a>MPU6050::setAuxVDDIOLevel(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c3]"></a>MPU6050::getRate()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[c5]"></a>MPU6050::setRate(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c7]"></a>MPU6050::getExternalFrameSync()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[c8]"></a>MPU6050::setExternalFrameSync(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c9]"></a>MPU6050::getDLPFMode()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[ca]"></a>MPU6050::setDLPFMode(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[cb]"></a>MPU6050::getFullScaleGyroRange()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[cc]"></a>MPU6050::getAccelXSelfTest()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[cd]"></a>MPU6050::setAccelXSelfTest(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ce]"></a>MPU6050::getAccelYSelfTest()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[cf]"></a>MPU6050::setAccelYSelfTest(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d0]"></a>MPU6050::getAccelZSelfTest()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[d1]"></a>MPU6050::setAccelZSelfTest(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d2]"></a>MPU6050::getFullScaleAccelRange()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[d3]"></a>MPU6050::getDHPFMode()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[d4]"></a>MPU6050::setDHPFMode(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d5]"></a>MPU6050::getFreefallDetectionThreshold()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[d6]"></a>MPU6050::setFreefallDetectionThreshold(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d7]"></a>MPU6050::getFreefallDetectionDuration()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[d8]"></a>MPU6050::setFreefallDetectionDuration(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>MPU6050::getMotionDetectionThreshold()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[da]"></a>MPU6050::setMotionDetectionThreshold(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[db]"></a>MPU6050::getMotionDetectionDuration()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[dc]"></a>MPU6050::setMotionDetectionDuration(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>MPU6050::getZeroMotionDetectionThreshold()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[de]"></a>MPU6050::setZeroMotionDetectionThreshold(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[df]"></a>MPU6050::getZeroMotionDetectionDuration()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[e0]"></a>MPU6050::setZeroMotionDetectionDuration(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>MPU6050::getTempFIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[e2]"></a>MPU6050::setTempFIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>MPU6050::getXGyroFIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[e4]"></a>MPU6050::setXGyroFIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e5]"></a>MPU6050::getYGyroFIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[e6]"></a>MPU6050::setYGyroFIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e7]"></a>MPU6050::getZGyroFIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[e8]"></a>MPU6050::setZGyroFIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e9]"></a>MPU6050::getAccelFIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[ea]"></a>MPU6050::setAccelFIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>MPU6050::getSlave2FIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[ec]"></a>MPU6050::setSlave2FIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ed]"></a>MPU6050::getSlave1FIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[ee]"></a>MPU6050::setSlave1FIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ef]"></a>MPU6050::getSlave0FIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[f0]"></a>MPU6050::setSlave0FIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f1]"></a>MPU6050::getMultiMasterEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[f2]"></a>MPU6050::setMultiMasterEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f3]"></a>MPU6050::getWaitForExternalSensorEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[f4]"></a>MPU6050::setWaitForExternalSensorEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f5]"></a>MPU6050::getSlave3FIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[f6]"></a>MPU6050::setSlave3FIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f7]"></a>MPU6050::getSlaveReadWriteTransitionEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[f8]"></a>MPU6050::setSlaveReadWriteTransitionEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f9]"></a>MPU6050::getMasterClockSpeed()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[fa]"></a>MPU6050::setMasterClockSpeed(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[fb]"></a>MPU6050::getSlaveAddress(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[fc]"></a>MPU6050::setSlaveAddress(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[fd]"></a>MPU6050::getSlaveRegister(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[fe]"></a>MPU6050::setSlaveRegister(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[ff]"></a>MPU6050::getSlaveEnabled(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[100]"></a>MPU6050::setSlaveEnabled(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[101]"></a>MPU6050::getSlaveWordByteSwap(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[102]"></a>MPU6050::setSlaveWordByteSwap(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[103]"></a>MPU6050::getSlaveWriteMode(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[104]"></a>MPU6050::setSlaveWriteMode(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[105]"></a>MPU6050::getSlaveWordGroupOffset(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[106]"></a>MPU6050::setSlaveWordGroupOffset(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[107]"></a>MPU6050::getSlaveDataLength(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[108]"></a>MPU6050::setSlaveDataLength(unsigned char, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[109]"></a>MPU6050::getSlave4Address()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[10a]"></a>MPU6050::setSlave4Address(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[10b]"></a>MPU6050::getSlave4Register()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[10c]"></a>MPU6050::setSlave4Register(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[10d]"></a>MPU6050::setSlave4OutputByte(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[10e]"></a>MPU6050::getSlave4Enabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[10f]"></a>MPU6050::setSlave4Enabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[110]"></a>MPU6050::getSlave4InterruptEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[111]"></a>MPU6050::setSlave4InterruptEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>MPU6050::getSlave4WriteMode()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[113]"></a>MPU6050::setSlave4WriteMode(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[114]"></a>MPU6050::getSlave4MasterDelay()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[115]"></a>MPU6050::setSlave4MasterDelay(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[116]"></a>MPU6050::getSlate4InputByte()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[117]"></a>MPU6050::getPassthroughStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[118]"></a>MPU6050::getSlave4IsDone()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[119]"></a>MPU6050::getLostArbitration()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[11a]"></a>MPU6050::getSlave4Nack()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[11b]"></a>MPU6050::getSlave3Nack()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[11c]"></a>MPU6050::getSlave2Nack()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[11d]"></a>MPU6050::getSlave1Nack()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[11e]"></a>MPU6050::getSlave0Nack()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[11f]"></a>MPU6050::getInterruptMode()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[120]"></a>MPU6050::setInterruptMode(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[121]"></a>MPU6050::getInterruptDrive()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[122]"></a>MPU6050::setInterruptDrive(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[123]"></a>MPU6050::getInterruptLatch()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[124]"></a>MPU6050::setInterruptLatch(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[125]"></a>MPU6050::getInterruptLatchClear()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[126]"></a>MPU6050::setInterruptLatchClear(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[127]"></a>MPU6050::getFSyncInterruptLevel()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[128]"></a>MPU6050::setFSyncInterruptLevel(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[129]"></a>MPU6050::getFSyncInterruptEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[12a]"></a>MPU6050::setFSyncInterruptEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[12b]"></a>MPU6050::getI2CBypassEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[12c]"></a>MPU6050::setI2CBypassEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[12d]"></a>MPU6050::getClockOutputEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[12e]"></a>MPU6050::setClockOutputEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[12f]"></a>MPU6050::getIntEnabled()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[130]"></a>MPU6050::setIntEnabled(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[131]"></a>MPU6050::getIntFreefallEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[132]"></a>MPU6050::setIntFreefallEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[133]"></a>MPU6050::getIntMotionEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[134]"></a>MPU6050::setIntMotionEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[135]"></a>MPU6050::getIntZeroMotionEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[136]"></a>MPU6050::setIntZeroMotionEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[137]"></a>MPU6050::getIntFIFOBufferOverflowEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[138]"></a>MPU6050::setIntFIFOBufferOverflowEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[139]"></a>MPU6050::getIntI2CMasterEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[13a]"></a>MPU6050::setIntI2CMasterEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13b]"></a>MPU6050::getIntDataReadyEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[13c]"></a>MPU6050::setIntDataReadyEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>MPU6050::getIntStatus()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[13e]"></a>MPU6050::getIntFreefallStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[13f]"></a>MPU6050::getIntMotionStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[140]"></a>MPU6050::getIntZeroMotionStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[141]"></a>MPU6050::getIntFIFOBufferOverflowStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[142]"></a>MPU6050::getIntI2CMasterStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[143]"></a>MPU6050::getIntDataReadyStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[144]"></a>MPU6050::getMotion9(short*, short*, short*, short*, short*, short*, short*, short*, short*)</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[146]"></a>MPU6050::getAcceleration(short*, short*, short*)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[147]"></a>MPU6050::getAccelerationX()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[148]"></a>MPU6050::getAccelerationY()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[149]"></a>MPU6050::getAccelerationZ()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[14a]"></a>MPU6050::getRotation(short*, short*, short*)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[14b]"></a>MPU6050::getRotationX()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[14c]"></a>MPU6050::getRotationY()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[14d]"></a>MPU6050::getRotationZ()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[14e]"></a>MPU6050::getExternalSensorByte(int)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[14f]"></a>MPU6050::getExternalSensorWord(int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[150]"></a>MPU6050::getExternalSensorDWord(int)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[151]"></a>MPU6050::getXNegMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[152]"></a>MPU6050::getXPosMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[153]"></a>MPU6050::getYNegMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[154]"></a>MPU6050::getYPosMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[155]"></a>MPU6050::getZNegMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[156]"></a>MPU6050::getZPosMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[157]"></a>MPU6050::getZeroMotionDetected()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[158]"></a>MPU6050::setSlaveOutputByte(unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[159]"></a>MPU6050::getExternalShadowDelayEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[15a]"></a>MPU6050::setExternalShadowDelayEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15b]"></a>MPU6050::getSlaveDelayEnabled(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[15c]"></a>MPU6050::setSlaveDelayEnabled(unsigned char, bool)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>MPU6050::resetGyroscopePath()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15e]"></a>MPU6050::resetAccelerometerPath()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15f]"></a>MPU6050::resetTemperaturePath()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[160]"></a>MPU6050::getAccelerometerPowerOnDelay()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[161]"></a>MPU6050::setAccelerometerPowerOnDelay(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[162]"></a>MPU6050::getFreefallDetectionCounterDecrement()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[163]"></a>MPU6050::setFreefallDetectionCounterDecrement(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[164]"></a>MPU6050::getMotionDetectionCounterDecrement()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[165]"></a>MPU6050::setMotionDetectionCounterDecrement(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>MPU6050::getFIFOEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[167]"></a>MPU6050::setFIFOEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[168]"></a>MPU6050::getI2CMasterModeEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[169]"></a>MPU6050::setI2CMasterModeEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16a]"></a>MPU6050::switchSPIEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16b]"></a>MPU6050::resetFIFO()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16c]"></a>MPU6050::resetI2CMaster()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>MPU6050::resetSensors()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16e]"></a>MPU6050::reset()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16f]"></a>MPU6050::getSleepEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[170]"></a>MPU6050::getWakeCycleEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[171]"></a>MPU6050::setWakeCycleEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[172]"></a>MPU6050::getTempSensorEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[173]"></a>MPU6050::setTempSensorEnabled(bool)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[174]"></a>MPU6050::getClockSource()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[175]"></a>MPU6050::getWakeFrequency()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[176]"></a>MPU6050::setWakeFrequency(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[177]"></a>MPU6050::getStandbyXAccelEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[178]"></a>MPU6050::setStandbyXAccelEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[179]"></a>MPU6050::getStandbyYAccelEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[17a]"></a>MPU6050::setStandbyYAccelEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17b]"></a>MPU6050::getStandbyZAccelEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[17c]"></a>MPU6050::setStandbyZAccelEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17d]"></a>MPU6050::getStandbyXGyroEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[17e]"></a>MPU6050::setStandbyXGyroEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[17f]"></a>MPU6050::getStandbyYGyroEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[180]"></a>MPU6050::setStandbyYGyroEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[181]"></a>MPU6050::getStandbyZGyroEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[182]"></a>MPU6050::setStandbyZGyroEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[183]"></a>MPU6050::getFIFOCount()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[184]"></a>MPU6050::getFIFOByte()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[185]"></a>MPU6050::setFIFOByte(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[186]"></a>MPU6050::getFIFOBytes(unsigned char*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[187]"></a>MPU6050::setDeviceID(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[188]"></a>MPU6050::getOTPBankValid()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[189]"></a>MPU6050::setOTPBankValid(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18a]"></a>MPU6050::getXGyroOffset()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[18b]"></a>MPU6050::setXGyroOffset(signed char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18c]"></a>MPU6050::getYGyroOffset()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[18d]"></a>MPU6050::setYGyroOffset(signed char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18e]"></a>MPU6050::getZGyroOffset()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[18f]"></a>MPU6050::setZGyroOffset(signed char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>MPU6050::getXFineGain()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[191]"></a>MPU6050::setXFineGain(signed char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[192]"></a>MPU6050::getYFineGain()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[193]"></a>MPU6050::setYFineGain(signed char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[194]"></a>MPU6050::getZFineGain()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[195]"></a>MPU6050::setZFineGain(signed char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[196]"></a>MPU6050::getXAccelOffset()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[197]"></a>MPU6050::setXAccelOffset(short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[199]"></a>MPU6050::getYAccelOffset()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[19a]"></a>MPU6050::setYAccelOffset(short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[19b]"></a>MPU6050::getZAccelOffset()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[19c]"></a>MPU6050::setZAccelOffset(short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[19d]"></a>MPU6050::getXGyroOffsetUser()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[19e]"></a>MPU6050::setXGyroOffsetUser(short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[19f]"></a>MPU6050::getYGyroOffsetUser()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1a0]"></a>MPU6050::setYGyroOffsetUser(short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1a1]"></a>MPU6050::getZGyroOffsetUser()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1a2]"></a>MPU6050::setZGyroOffsetUser(short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1a3]"></a>MPU6050::getIntPLLReadyEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1a4]"></a>MPU6050::setIntPLLReadyEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a5]"></a>MPU6050::getIntDMPEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1a6]"></a>MPU6050::setIntDMPEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a7]"></a>MPU6050::getDMPInt5Status()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1a8]"></a>MPU6050::getDMPInt4Status()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1a9]"></a>MPU6050::getDMPInt3Status()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1aa]"></a>MPU6050::getDMPInt2Status()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1ab]"></a>MPU6050::getDMPInt1Status()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1ac]"></a>MPU6050::getDMPInt0Status()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1ad]"></a>MPU6050::getIntPLLReadyStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1ae]"></a>MPU6050::getIntDMPStatus()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1af]"></a>MPU6050::getDMPEnabled()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1b0]"></a>MPU6050::setDMPEnabled(bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b1]"></a>MPU6050::resetDMP()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b2]"></a>MPU6050::setMemoryBank(unsigned char, bool, bool)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::readMemoryBlock(unsigned char*, unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b3]"></a>MPU6050::setMemoryStartAddress(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::readMemoryBlock(unsigned char*, unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b4]"></a>MPU6050::readMemoryByte()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1b5]"></a>MPU6050::writeMemoryByte(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b6]"></a>MPU6050::readMemoryBlock(unsigned char*, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMemoryStartAddress(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMemoryBank(unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[1b7]"></a>MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)</STRONG> (Thumb, 328 bytes, Stack size 72 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMemoryStartAddress(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMemoryBank(unsigned char, bool, bool)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeProgMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[1ba]"></a>MPU6050::writeProgMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[1bb]"></a>MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeProgDMPConfigurationSet(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1bd]"></a>MPU6050::writeProgDMPConfigurationSet(const unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[1be]"></a>MPU6050::getDMPConfig1()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1bf]"></a>MPU6050::setDMPConfig1(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1c0]"></a>MPU6050::getDMPConfig2()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1c1]"></a>MPU6050::setDMPConfig2(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[af]"></a>I2Cdev::I2Cdev()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = I2Cdev::I2Cdev() &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::MPU6050(unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::MPU6050()
</UL>

<P><STRONG><a name="[2c1]"></a>I2Cdev::I2Cdev__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, i2cdev.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>I2Cdev::I2Cdev(PinName, PinName)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2c2]"></a>I2Cdev::I2Cdev__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, i2cdev.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::readMemoryBlock(unsigned char*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZGyroOffsetUser()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYGyroOffsetUser()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXGyroOffsetUser()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZAccelOffset()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYAccelOffset()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXAccelOffset()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOBytes(unsigned char*, unsigned char)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOCount()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalSensorDWord(int)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalSensorWord(int)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotationZ()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotationY()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotationX()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotation(short*, short*, short*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerationZ()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerationY()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerationX()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAcceleration(short*, short*, short*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion9(short*, short*, short*, short*, short*, short*, short*, short*, short*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTemperature()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[c4]"></a>I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPConfig2()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPConfig1()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::readMemoryByte()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZFineGain()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYFineGain()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXFineGain()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOByte()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalSensorByte(int)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntStatus()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntEnabled()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlate4InputByte()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Register()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Address()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveRegister(unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveAddress(unsigned char)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZeroMotionDetectionDuration()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZeroMotionDetectionThreshold()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotionDetectionDuration()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotionDetectionThreshold()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFreefallDetectionDuration()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFreefallDetectionThreshold()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRate()
</UL>

<P><STRONG><a name="[c1]"></a>I2Cdev::readBit(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPEnabled()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDMPStatus()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntPLLReadyStatus()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt0Status()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt1Status()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt2Status()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt3Status()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt4Status()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt5Status()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDMPEnabled()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntPLLReadyEnabled()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getOTPBankValid()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyZGyroEnabled()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyYGyroEnabled()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyXGyroEnabled()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyZAccelEnabled()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyYAccelEnabled()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyXAccelEnabled()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTempSensorEnabled()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getWakeCycleEnabled()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSleepEnabled()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getI2CMasterModeEnabled()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOEnabled()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveDelayEnabled(unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalShadowDelayEnabled()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZeroMotionDetected()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZPosMotionDetected()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZNegMotionDetected()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYPosMotionDetected()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYNegMotionDetected()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXPosMotionDetected()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXNegMotionDetected()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDataReadyStatus()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntI2CMasterStatus()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFIFOBufferOverflowStatus()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntZeroMotionStatus()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntMotionStatus()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFreefallStatus()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDataReadyEnabled()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntI2CMasterEnabled()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFIFOBufferOverflowEnabled()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntZeroMotionEnabled()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntMotionEnabled()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFreefallEnabled()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getClockOutputEnabled()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getI2CBypassEnabled()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFSyncInterruptEnabled()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFSyncInterruptLevel()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptLatchClear()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptLatch()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptDrive()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptMode()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave0Nack()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave1Nack()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave2Nack()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave3Nack()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Nack()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getLostArbitration()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4IsDone()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getPassthroughStatus()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4WriteMode()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4InterruptEnabled()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Enabled()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveWordGroupOffset(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveWriteMode(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveWordByteSwap(unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveEnabled(unsigned char)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveReadWriteTransitionEnabled()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave3FIFOEnabled()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getWaitForExternalSensorEnabled()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMultiMasterEnabled()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave0FIFOEnabled()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave1FIFOEnabled()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave2FIFOEnabled()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelFIFOEnabled()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZGyroFIFOEnabled()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYGyroFIFOEnabled()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXGyroFIFOEnabled()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTempFIFOEnabled()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelZSelfTest()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelYSelfTest()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelXSelfTest()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAuxVDDIOLevel()
</UL>

<P><STRONG><a name="[1cb]"></a>I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWord(unsigned char, unsigned char, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[1ca]"></a>I2Cdev::readWord(unsigned char, unsigned char, unsigned short*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBitsW(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBitW(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBitsW(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBitW(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[1cc]"></a>I2Cdev::readBitW(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWord(unsigned char, unsigned char, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[a5]"></a>I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZGyroOffset()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYGyroOffset()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXGyroOffset()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getWakeFrequency()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getClockSource()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotionDetectionCounterDecrement()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFreefallDetectionCounterDecrement()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerometerPowerOnDelay()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4MasterDelay()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveDataLength(unsigned char)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMasterClockSpeed()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDHPFMode()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFullScaleAccelRange()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFullScaleGyroRange()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDLPFMode()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalFrameSync()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>

<P><STRONG><a name="[1cd]"></a>I2Cdev::readBitsW(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 44 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWord(unsigned char, unsigned char, unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[1b8]"></a>I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; mbed::I2C::write(int) &rArr; i2c_byte_write &rArr; i2c_do_write &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::start()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[c6]"></a>I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2Cdev::writeByte(unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; mbed::I2C::write(int) &rArr; i2c_byte_write &rArr; i2c_do_write &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setDMPConfig2(unsigned char)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setDMPConfig1(unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryByte(unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMemoryStartAddress(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMemoryBank(unsigned char, bool, bool)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZFineGain(signed char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYFineGain(signed char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXFineGain(signed char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFIFOByte(unsigned char)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveOutputByte(unsigned char, unsigned char)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion9(short*, short*, short*, short*, short*, short*, short*, short*, short*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntEnabled(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4OutputByte(unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4Register(unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4Address(unsigned char)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveRegister(unsigned char, unsigned char)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveAddress(unsigned char, unsigned char)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZeroMotionDetectionDuration(unsigned char)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZeroMotionDetectionThreshold(unsigned char)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMotionDetectionDuration(unsigned char)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMotionDetectionThreshold(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFreefallDetectionDuration(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFreefallDetectionThreshold(unsigned char)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setRate(unsigned char)
</UL>

<P><STRONG><a name="[a1]"></a>I2Cdev::readTimeout()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2cdev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBitsW(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBitW(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPConfig2()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPConfig1()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::readMemoryBlock(unsigned char*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::readMemoryByte()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPEnabled()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDMPStatus()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntPLLReadyStatus()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt0Status()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt1Status()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt2Status()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt3Status()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt4Status()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDMPInt5Status()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDMPEnabled()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntPLLReadyEnabled()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZGyroOffsetUser()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYGyroOffsetUser()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXGyroOffsetUser()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZAccelOffset()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYAccelOffset()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXAccelOffset()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZFineGain()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYFineGain()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXFineGain()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZGyroOffset()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYGyroOffset()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXGyroOffset()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getOTPBankValid()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOBytes(unsigned char*, unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOByte()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOCount()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyZGyroEnabled()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyYGyroEnabled()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyXGyroEnabled()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyZAccelEnabled()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyYAccelEnabled()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getStandbyXAccelEnabled()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getWakeFrequency()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getClockSource()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTempSensorEnabled()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getWakeCycleEnabled()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSleepEnabled()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getI2CMasterModeEnabled()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFIFOEnabled()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotionDetectionCounterDecrement()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFreefallDetectionCounterDecrement()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerometerPowerOnDelay()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveDelayEnabled(unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalShadowDelayEnabled()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZeroMotionDetected()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZPosMotionDetected()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZNegMotionDetected()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYPosMotionDetected()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYNegMotionDetected()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXPosMotionDetected()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXNegMotionDetected()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalSensorDWord(int)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalSensorWord(int)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalSensorByte(int)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotationZ()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotationY()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotationX()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRotation(short*, short*, short*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerationZ()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerationY()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelerationX()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAcceleration(short*, short*, short*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion9(short*, short*, short*, short*, short*, short*, short*, short*, short*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDataReadyStatus()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntI2CMasterStatus()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFIFOBufferOverflowStatus()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntZeroMotionStatus()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntMotionStatus()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFreefallStatus()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntStatus()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntDataReadyEnabled()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntI2CMasterEnabled()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFIFOBufferOverflowEnabled()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntZeroMotionEnabled()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntMotionEnabled()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntFreefallEnabled()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getIntEnabled()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getClockOutputEnabled()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getI2CBypassEnabled()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFSyncInterruptEnabled()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFSyncInterruptLevel()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptLatchClear()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptLatch()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptDrive()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getInterruptMode()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave0Nack()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave1Nack()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave2Nack()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave3Nack()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Nack()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getLostArbitration()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4IsDone()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getPassthroughStatus()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlate4InputByte()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4MasterDelay()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4WriteMode()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4InterruptEnabled()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Enabled()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Register()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave4Address()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveDataLength(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveWordGroupOffset(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveWriteMode(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveWordByteSwap(unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveEnabled(unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveRegister(unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveAddress(unsigned char)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMasterClockSpeed()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlaveReadWriteTransitionEnabled()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave3FIFOEnabled()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getWaitForExternalSensorEnabled()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMultiMasterEnabled()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave0FIFOEnabled()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave1FIFOEnabled()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getSlave2FIFOEnabled()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelFIFOEnabled()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZGyroFIFOEnabled()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getYGyroFIFOEnabled()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getXGyroFIFOEnabled()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTempFIFOEnabled()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZeroMotionDetectionDuration()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getZeroMotionDetectionThreshold()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotionDetectionDuration()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotionDetectionThreshold()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFreefallDetectionDuration()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFreefallDetectionThreshold()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDHPFMode()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFullScaleAccelRange()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelZSelfTest()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelYSelfTest()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAccelXSelfTest()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getFullScaleGyroRange()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDLPFMode()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getExternalFrameSync()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getRate()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getAuxVDDIOLevel()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getTemperature()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[a8]"></a>I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetDMP()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setDMPEnabled(bool)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntDMPEnabled(bool)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntPLLReadyEnabled(bool)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setOTPBankValid(bool)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setStandbyZGyroEnabled(bool)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setStandbyYGyroEnabled(bool)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setStandbyXGyroEnabled(bool)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setStandbyZAccelEnabled(bool)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setStandbyYAccelEnabled(bool)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setStandbyXAccelEnabled(bool)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setTempSensorEnabled(bool)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setWakeCycleEnabled(bool)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::reset()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetSensors()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetI2CMaster()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetFIFO()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::switchSPIEnabled(bool)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setI2CMasterModeEnabled(bool)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFIFOEnabled(bool)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetTemperaturePath()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetAccelerometerPath()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetGyroscopePath()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveDelayEnabled(unsigned char, bool)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setExternalShadowDelayEnabled(bool)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntDataReadyEnabled(bool)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntI2CMasterEnabled(bool)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntFIFOBufferOverflowEnabled(bool)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntZeroMotionEnabled(bool)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntMotionEnabled(bool)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setIntFreefallEnabled(bool)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setClockOutputEnabled(bool)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setI2CBypassEnabled(bool)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFSyncInterruptEnabled(bool)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFSyncInterruptLevel(bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setInterruptLatchClear(bool)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setInterruptLatch(bool)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setInterruptDrive(bool)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setInterruptMode(bool)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4WriteMode(bool)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4InterruptEnabled(bool)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4Enabled(bool)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveWordGroupOffset(unsigned char, bool)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveWriteMode(unsigned char, bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveWordByteSwap(unsigned char, bool)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveEnabled(unsigned char, bool)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveReadWriteTransitionEnabled(bool)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave3FIFOEnabled(bool)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setWaitForExternalSensorEnabled(bool)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMultiMasterEnabled(bool)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave0FIFOEnabled(bool)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave1FIFOEnabled(bool)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave2FIFOEnabled(bool)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setAccelFIFOEnabled(bool)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZGyroFIFOEnabled(bool)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYGyroFIFOEnabled(bool)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXGyroFIFOEnabled(bool)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setTempFIFOEnabled(bool)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setAccelZSelfTest(bool)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setAccelYSelfTest(bool)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setAccelXSelfTest(bool)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setAuxVDDIOLevel(unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSleepEnabled(bool)
</UL>

<P><STRONG><a name="[1d1]"></a>I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[198]"></a>I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 36 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBitsW(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBitW(unsigned char, unsigned char, unsigned char, unsigned short)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZGyroOffsetUser(short)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYGyroOffsetUser(short)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXGyroOffsetUser(short)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZAccelOffset(short)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYAccelOffset(short)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXAccelOffset(short)
</UL>

<P><STRONG><a name="[1d2]"></a>I2Cdev::writeBitW(unsigned char, unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 36 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWord(unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[aa]"></a>I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, i2cdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZGyroOffset(signed char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYGyroOffset(signed char)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXGyroOffset(signed char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setDeviceID(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setWakeFrequency(unsigned char)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMotionDetectionCounterDecrement(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFreefallDetectionCounterDecrement(unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setAccelerometerPowerOnDelay(unsigned char)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlave4MasterDelay(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSlaveDataLength(unsigned char, unsigned char)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setMasterClockSpeed(unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setDHPFMode(unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setDLPFMode(unsigned char)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setExternalFrameSync(unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setClockSource(unsigned char)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleGyroRange(unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleAccelRange(unsigned char)
</UL>

<P><STRONG><a name="[1d3]"></a>I2Cdev::writeBitsW(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, i2cdev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWord(unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readTimeout()
</UL>

<P><STRONG><a name="[1bc]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeDMPConfigurationSet(const unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[1d5]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[1d6]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[68]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1db]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6e]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[76]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[62]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1dc]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1df]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1e1]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1e3]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[1e6]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[1e7]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1ea]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1ec]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1e8]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[245]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[1b9]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::writeMemoryBlock(const unsigned char*, unsigned short, unsigned char, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[248]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[247]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[2c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::CallChain(int)
</UL>

<P><STRONG><a name="[25b]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[5a]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>

<P><STRONG><a name="[257]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2c6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1f3]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[80]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1f6]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1f9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1f7]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1da]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[60]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[3e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>

<P><STRONG><a name="[1fb]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[70]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[74]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[1e2]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1e0]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3f]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1fa]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[200]"></a>__flsbuf</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[262]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2c8]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[2c9]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[202]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[205]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1e4]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[201]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[87]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[20a]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[20b]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[2ca]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1f0]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[4a]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[21c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[2cd]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1fd]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2cf]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[21a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[78]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[7a]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[21b]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[7c]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[7e]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[1ff]"></a>__vfscanf</STRONG> (Thumb, 876 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[206]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[2d0]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[20d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[209]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[20c]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1f1]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[210]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[21d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[211]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[82]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[219]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[213]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[222]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[220]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[21e]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[21f]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[221]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[224]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2d1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2d3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[226]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2d4]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[214]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[229]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[228]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[22a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[22b]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[215]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[216]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[22c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[90]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; MPU6050::MPU6050() &rArr; I2Cdev::I2Cdev() &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[27e]"></a>NVIC_SetVector</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[3b]"></a>SystemInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, system_LPC17xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC17xx.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, retarget.o(i._ZN4mbed10FileHandle4flenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::flen()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[2d6]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[4e]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[250]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer4callEv))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::call()
</UL>

<P><STRONG><a name="[1c9]"></a>mbed::I2C::read(int, char*, int, bool)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, I2C.o(i._ZN4mbed3I2C4readEiPcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1d0]"></a>mbed::I2C::stop()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I2C.o(i._ZN4mbed3I2C4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::I2C::stop() &rArr; i2c_stop &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1ce]"></a>mbed::I2C::start()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I2C.o(i._ZN4mbed3I2C5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::I2C::start() &rArr; i2c_start &rArr; i2c_conset
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1cf]"></a>mbed::I2C::write(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, I2C.o(i._ZN4mbed3I2C5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::I2C::write(int) &rArr; i2c_byte_write &rArr; i2c_do_write &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[1c8]"></a>mbed::I2C::write(int, const char*, int, bool)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, I2C.o(i._ZN4mbed3I2C5writeEiPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write &rArr; i2c_stop &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[231]"></a>mbed::I2C::aquire()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, I2C.o(i._ZN4mbed3I2C6aquireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::I2C::aquire()
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[1c6]"></a>mbed::I2C::I2C(PinName, PinName)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2CC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; pinmap_merge &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::I2Cdev(PinName, PinName)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::I2Cdev()
</UL>

<P><STRONG><a name="[2d7]"></a>mbed::I2C::I2C__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2CC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[239]"></a>mbed::Timer::reset()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbed::Timer::reset() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>

<P><STRONG><a name="[b2]"></a>mbed::Timer::start()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbed::Timer::start() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ba]"></a>mbed::Timer::read_us()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer7read_usEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbed::Timer::read_us() &rArr; mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[23b]"></a>mbed::Timer::slicetime()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5Timer9slicetimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbed::Timer::slicetime() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_us()
</UL>

<P><STRONG><a name="[1c3]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[2d8]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[1c4]"></a>mbed::PwmOut::PwmOut(PinName)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN4mbed6PwmOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbed::PwmOut::PwmOut(PinName) &rArr; pwmout_init &rArr; pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[2d9]"></a>mbed::PwmOut::PwmOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed6PwmOutC1E7PinName), UNUSED)

<P><STRONG><a name="[9f]"></a>mbed::PwmOut::operator =(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i._ZN4mbed6PwmOutaSEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::PwmOut::operator =(float) &rArr; pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drivemotor(int)
</UL>

<P><STRONG><a name="[48]"></a>mbed::Serial::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, Serial.o(i._ZN4mbed6Serial12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Serial::_irq_handler(unsigned, SerialIrq) &rArr; mbed::CallChain::call()
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc)
</UL>
<P><STRONG><a name="[54]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Serial::_putc(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[b0]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::I2Cdev(PinName, PinName)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::I2Cdev()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::MPU6050(unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::MPU6050()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[2da]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc), UNUSED)

<P><STRONG><a name="[3d]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[2db]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[53]"></a>mbed::Stream::flen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream4flenEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[50]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[52]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[4f]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[51]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[be]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[240]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[2dc]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[55]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[24c]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>

<P><STRONG><a name="[246]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[249]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[2dd]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[56]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[2de]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[244]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2df]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[57]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[24a]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[24b]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[24d]"></a>mbed::FilePath::file()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[25c]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[24e]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[25d]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[24f]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2e0]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[23e]"></a>mbed::CallChain::call()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChain4callEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CallChain::call()
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_irq_handler(unsigned, SerialIrq)
</UL>

<P><STRONG><a name="[251]"></a>mbed::CallChain::clear()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChain5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::CallChain::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::~CallChain()
</UL>

<P><STRONG><a name="[22e]"></a>mbed::CallChain::CallChain(int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChainC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[2e1]"></a>mbed::CallChain::CallChain__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChainC1Ei), UNUSED)

<P><STRONG><a name="[49]"></a>mbed::CallChain::~CallChain()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, CallChain.o(i._ZN4mbed9CallChainD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::CallChain::~CallChain() &rArr; mbed::CallChain::clear() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::clear()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> CallChain.o(.constdata__ZTVN4mbed9CallChainE)
<LI> main.o(i._ZN4mbed6SerialD1Ev)
</UL>
<P><STRONG><a name="[2e2]"></a>mbed::CallChain::~CallChain__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, CallChain.o(i._ZN4mbed9CallChainD1Ev), UNUSED)

<P><STRONG><a name="[bc]"></a>Kalman::getAngle(double, double, double)</STRONG> (Thumb, 540 bytes, Stack size 80 bytes, main.o(i._ZN6Kalman8getAngleEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Kalman::getAngle(double, double, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b9]"></a>Kalman::setAngle(double)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN6Kalman8setAngleEd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c5]"></a>Kalman::Kalman()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i._ZN6KalmanC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[2e3]"></a>Kalman::Kalman__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN6KalmanC1Ev), UNUSED)

<P><STRONG><a name="[252]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::clear()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::~CallChain()
</UL>

<P><STRONG><a name="[253]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::CallChain(int)
</UL>

<P><STRONG><a name="[255]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[218]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[8a]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[4c]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[258]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[259]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[8c]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1dd]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1ee]"></a>_sys_close</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[203]"></a>_sys_flen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[204]"></a>_sys_istty</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, retarget.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1e9]"></a>_sys_open</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[207]"></a>_sys_seek</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[208]"></a>_sys_write</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[25e]"></a>atan</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[b7]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[91]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, exit.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = exit &rArr; mbed_die &rArr; gpio_init &rArr; pin_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_exit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[265]"></a>gpio_dir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[263]"></a>gpio_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_init &rArr; pin_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[264]"></a>gpio_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_api.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_set &rArr; pin_function
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[235]"></a>i2c_byte_write</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i2c_api.o(i.i2c_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_byte_write &rArr; i2c_do_write &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int)
</UL>

<P><STRONG><a name="[237]"></a>i2c_frequency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_api.o(i.i2c_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>

<P><STRONG><a name="[238]"></a>i2c_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, i2c_api.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = i2c_init &rArr; pinmap_merge &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conclr
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[232]"></a>i2c_read</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, i2c_api.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_read &rArr; i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_write
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_read
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[234]"></a>i2c_start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i2c_api.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_start &rArr; i2c_conset
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_SI
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conclr
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::start()
</UL>

<P><STRONG><a name="[233]"></a>i2c_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c_api.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_stop &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conset
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_SI
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::stop()
</UL>

<P><STRONG><a name="[236]"></a>i2c_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, i2c_api.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_write &rArr; i2c_stop &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_write
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>

<P><STRONG><a name="[261]"></a>mbed_die</STRONG> (Thumb, 126 bytes, Stack size 96 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mbed_die &rArr; gpio_init &rArr; pin_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25f]"></a>mbed_interface_connected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed_interface.o(i.mbed_interface_connected))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[22d]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[267]"></a>pin_function</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[266]"></a>pin_mode</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[26f]"></a>pinmap_merge</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pinmap_merge &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[26e]"></a>pinmap_peripheral</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pinmap_peripheral &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[270]"></a>pinmap_pinout</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[23c]"></a>pwmout_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, pwmout_api.o(i.pwmout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pwmout_init &rArr; pinmap_pinout &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut(PinName)
</UL>

<P><STRONG><a name="[273]"></a>pwmout_period_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwmout_api.o(i.pwmout_period_ms))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[274]"></a>pwmout_period_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pwmout_api.o(i.pwmout_period_us))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_ms
</UL>

<P><STRONG><a name="[23d]"></a>pwmout_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pwmout_api.o(i.pwmout_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pwmout_write &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::operator =(float)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[272]"></a>semihost_connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, semihost_api.o(i.semihost_connected))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>

<P><STRONG><a name="[260]"></a>semihost_exit</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, semihost_api.o(i.semihost_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = semihost_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[277]"></a>serial_baud</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[27c]"></a>serial_format</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, serial_api.o(i.serial_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = serial_format &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[230]"></a>serial_init</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[242]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[23f]"></a>serial_putc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[27f]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[280]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[27d]"></a>us_ticker_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[4b]"></a>us_ticker_irq_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = us_ticker_irq_handler &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_init)
</UL>
<P><STRONG><a name="[23a]"></a>us_ticker_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::slicetime()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
</UL>

<P><STRONG><a name="[281]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[145]"></a>wait_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion9(short*, short*, short*, short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[282]"></a>wait_us</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wait_api.o(i.wait_us), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[85]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[45]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::getAngle(double, double, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[283]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[287]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::getAngle(double, double, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[289]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[28a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2e4]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::getAngle(double, double, double)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[28b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[286]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[285]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::getAngle(double, double, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[28c]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::getAngle(double, double, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[28e]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[28f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[291]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[294]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[299]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drivemotor(int)
</UL>

<P><STRONG><a name="[295]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePid(int, int)
</UL>

<P><STRONG><a name="[296]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[297]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drivemotor(int)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePid(int, int)
</UL>

<P><STRONG><a name="[2e5]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[275]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[2e6]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[27b]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[298]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[2e7]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatePid(int, int)
</UL>

<P><STRONG><a name="[29a]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[290]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[293]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[29b]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[64]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[288]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[25a]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[279]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[29d]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[58]"></a>__sti___8_main_cpp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman::Kalman()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::PwmOut::PwmOut(PinName)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[22f]"></a>init_serial()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget.o(i._Z11init_serialv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = init_serial() &rArr; serial_init &rArr; serial_baud &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[47]"></a>&lang;Func1&rang;</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, Serial.o(i.<Func1>))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = &lang;Func1&rang; &rArr; mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::CallChain(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc)
</UL>
<P><STRONG><a name="[269]"></a>i2c_clear_SI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c_api.o(i.i2c_clear_SI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conclr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_write
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_read
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[26a]"></a>i2c_conclr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_api.o(i.i2c_conclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_conclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_read
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_SI
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[26c]"></a>i2c_conset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_api.o(i.i2c_conset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_conset
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_read
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[26b]"></a>i2c_do_read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c_api.o(i.i2c_do_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_do_read &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_SI
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_conclr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_SI
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[268]"></a>i2c_do_write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c_api.o(i.i2c_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_do_write &rArr; i2c_clear_SI &rArr; i2c_conclr
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_SI
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clear_SI
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_byte_write
</UL>

<P><STRONG><a name="[26d]"></a>i2c_wait_SI</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c_api.o(i.i2c_wait_SI))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_write
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_do_read
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>

<P><STRONG><a name="[271]"></a>gpio_write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[28d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[284]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[29c]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[292]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[41]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[46]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
